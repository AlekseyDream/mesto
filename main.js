(()=>{"use strict";var e=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t={};e(t);var r={};e(r);var n={};e(n);var o={};e(o);var i={};function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===a(o)?o:String(o)),n)}var o}e(i);var c=function(){function e(t,r){var n=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=n,this._container=document.querySelector(r)}return t=e,(r=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(e){var t=this;e.reverse().forEach((function(e){t._renderer(e)}))}}])&&u(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e;var t,r}();function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function p(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,f(n.key),n)}}function s(e,t,r){return(t=f(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function f(e){var t=function(e,t){if("object"!==l(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==l(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===l(t)?t:String(t)}function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function y(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==d(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==d(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===d(o)?o:String(o)),n)}var o}function h(){return h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=v(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},h.apply(this,arguments)}function _(e,t){return _=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},_(e,t)}function v(e){return v=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},v(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_(e,t)}(a,e);var t,r,n,o,i=(t=a,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=v(t);if(r){var o=v(this).constructor;e=Reflect.construct(n,arguments,o)}else e=n.apply(this,arguments);return function(e,t){if(t&&("object"===d(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function a(e,t){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(r=i.call(this,e))._form=r._popup.querySelector(".popup__form"),r._button=r._form.querySelector(".popup__button-save"),r._handleDeleteFormSubmit=t,r._cardInfo={},r}return n=a,(o=[{key:"open",value:function(e){h(v(a.prototype),"open",this).call(this),this._cardInfo=e}},{key:"loadingConfirm",value:function(e){this._button.textContent=e?"Удаление...":"Да"}},{key:"setEventListeners",value:function(){var e=this;this._form.addEventListener("submit",(function(t){t.preventDefault(),e._handleDeleteFormSubmit(e._cardInfo)})),h(v(a.prototype),"setEventListeners",this).call(this)}}])&&y(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),a}(function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"_handleEscapeKey",(function(e){"Escape"===e.key&&r.close()})),s(this,"_closeByOverlay",(function(e){e.target.classList.contains("popup")&&r.close()})),this._popup=document.querySelector(t),this._popupProfileClose=this._popup.querySelector(".popup__button-close"),this.close=this.close.bind(this)}return t=e,(r=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keyup",this._handleEscapeKey)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keyup",this._handleEscapeKey)}},{key:"setEventListeners",value:function(){this._popupProfileClose.addEventListener("click",this.close),this._popup.addEventListener("click",this._closeByOverlay)}}])&&p(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e;var t,r}());function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function S(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==b(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==b(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===b(o)?o:String(o)),n)}var o}var g,w=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.url,this._headers=t.headers}return t=e,(r=[{key:"_handleReply",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._url,"/users/me"),{headers:this._headers}).then(this._handleReply)}},{key:"getAllCards",value:function(){return fetch("".concat(this._url,"/cards"),{headers:this._headers}).then(this._handleReply)}},{key:"updateUserInfo",value:function(e){return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._handleReply)}},{key:"addNewCard",value:function(e){return fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._handleReply)}},{key:"deleteCard",value:function(e){return fetch("".concat(this._url,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._handleReply)}},{key:"setLike",value:function(e){return fetch("".concat(this._url,"/cards/").concat(e,"/likes"),{method:"PUT",headers:this._headers}).then(this._handleReply)}},{key:"deleteLike",value:function(e){return fetch("".concat(this._url,"/cards/").concat(e,"/likes"),{method:"DELETE",headers:this._headers}).then(this._handleReply)}},{key:"updateUserAvatar",value:function(e){return fetch("".concat(this._url,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify(e)}).then(this._handleReply)}}])&&S(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e;var t,r}(),k=document.querySelector(".content"),E=k.querySelector(".profile__button"),P=document.querySelector(".profile__button-edit"),j=(k.querySelector(".profile__name"),k.querySelector(".profile__description"),document.querySelector(".profile__avatar"),document.querySelector(".popup_data_avatar")),O=(j.querySelector(".popup__form-input_data_avatar"),j.querySelector(".popup__form-avatar")),C=document.querySelector(".popup_data_profile-edit"),q=(C.querySelector(".popup__button-close"),C.querySelector("#popup__form-profile")),L=C.querySelector(".popup__form-input_data_name"),I=C.querySelector(".popup__form-input_data_about"),T=document.querySelector(".popup_data_card-add"),R=(T.querySelector(".popup__button-close"),T.querySelector(".popup__form-input_data_title"),T.querySelector(".popup__form-input_data_link"),T.querySelector("#popup__form-card")),A=(document.querySelector(".popup_data_image-add").querySelector(".popup__button-close"),document.querySelector(".profile__button-addCard")),U=(document.querySelector(".gallery"),document.querySelector(".popup__image"),document.querySelector(".popup__caption"),{formSelector:".popup__form",inputSelector:".popup__form-input",submitButtonSelector:".popup__button-save",inactiveButtonClass:"popup__button-save_inactive",inputErrorClass:"popup__form-input_error",errorClass:"popup__input-error_active"});function V(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var D=new r.FormValidator(R,U);D.enableValidation();var F=new r.FormValidator(q,U);F.enableValidation();var B=new r.FormValidator(O,U);B.enableValidation();var N=new c({renderer:function(e){N.addItem($(e))}},".gallery"),x=new o.PopupWithForm(".popup_data_profile-edit",(function(e){x.loading(!0),z.updateUserInfo(e).then((function(e){H.setUserInfo(e),x.close()})).catch((function(e){console.log(e)})).finally((function(){x.loading(!1,"Сохранить")}))}));x.setEventListeners();var W=new o.PopupWithForm(".popup_data_avatar",(function(e){W.loading(!0),z.updateUserAvatar(e).then((function(e){H.setUserAvatar(e),W.close()})).catch((function(e){console.log(e)})).finally((function(){W.loading(!1,"Обновить")}))}));W.setEventListeners();var J=new n.PopupWithImage(".popup_data_image-add");J.setEventListeners();var K=new o.PopupWithForm(".popup_data_card-add",(function(e){K.loading(!0),z.addNewCard(e).then((function(e){var t=$(e);N.addItem(t),K.close()})).catch((function(e){console.log(e)})).finally((function(){K.loading(!1,"Создать")}))}));K.setEventListeners();var M=new m(".popup_data_delete",(function(e){M.loadingConfirm(!0),z.deleteCard(e.getCardId()).then((function(){e.deleteCard(),M.close()})).catch((function(e){console.log(e)})).finally((function(){M.loadingConfirm(!1)}))}));M.setEventListeners();var H=new i.UserInfo({nameSelector:".profile__name",aboutSelector:".profile__description",profileAvatar:".profile__avatar"}),z=new w({url:"https://mesto.nomoreparties.co/v1/cohort-62",headers:{"Content-Type":"application/json",authorization:"94c5f97f-b8cd-4838-8c4c-bf26058ba6d0"}});Promise.all([z.getUserInfo(),z.getAllCards()]).then((function(e){var t,r,n=(r=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,u=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(u.push(n.value),u.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return u}}(t,r)||function(e,t){if(e){if("string"==typeof e)return V(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?V(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=n[0],i=n[1];g=o._id,H.setUserInfo(o),H.setUserAvatar(o),N.renderItems(i)})).catch((function(e){console.log(e)}));var $=function(e){var r=new t.Card({data:e,userId:g,handleCardClick:function(e,t){J.open(e,t)},handleLikeClick:function(){r.isLike()?z.deleteLike(r.getCardId()).then((function(e){r.likeCard(e.likes.length)})).catch((function(e){console.log(e)})):z.setLike(r.getCardId()).then((function(e){r.likeCard(e.likes.length)})).catch((function(e){console.log(e)}))},handleDeleteCard:function(){M.open(r)}},".gallery-template");return r.generateCard()};E.addEventListener("click",(function(){x.open();var e=H.getUserInfo();L.value=e.name,I.value=e.about,F.resetValid()})),A.addEventListener("click",(function(){K.open(),D.resetValid()})),P.addEventListener("click",(function(){B.resetValid(),W.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,